version: '3.8'

services:
  # Redis for queues
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # MongoDB for data persistence
  mongodb:
    image: mongo:6
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: notifications
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 3s
      retries: 3

  # API Gateway
  api-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/notifications?authSource=admin
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Email Worker
  email-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    command: ["node", "workers/emailWorker.js"]
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/notifications?authSource=admin
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - FROM_EMAIL=${FROM_EMAIL}
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    deploy:
      replicas: 2

  # SMS Worker
  sms-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    command: ["node", "workers/smsWorker.js"]
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/notifications?authSource=admin
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    deploy:
      replicas: 1

  # Push Notification Worker
  push-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    command: ["node", "workers/pushWorker.js"]
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/notifications?authSource=admin
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
      - FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    deploy:
      replicas: 1

volumes:
  redis_data:
  mongodb_data:

networks:
  default:
    name: notification-network
